// Code generated by mockery v2.9.2. DO NOT EDIT.

package mocks

import (
	contextx "github.com/blackhorseya/godutch/internal/pkg/base/contextx"
	event "github.com/blackhorseya/godutch/internal/pkg/entity/event"

	mock "github.com/stretchr/testify/mock"
)

// IBiz is an autogenerated mock type for the IBiz type
type IBiz struct {
	mock.Mock
}

// ChangeName provides a mock function with given fields: ctx, id, name
func (_m *IBiz) ChangeName(ctx contextx.Contextx, id int64, name string) (*event.Activity, error) {
	ret := _m.Called(ctx, id, name)

	var r0 *event.Activity
	if rf, ok := ret.Get(0).(func(contextx.Contextx, int64, string) *event.Activity); ok {
		r0 = rf(ctx, id, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*event.Activity)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(contextx.Contextx, int64, string) error); ok {
		r1 = rf(ctx, id, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, id
func (_m *IBiz) Delete(ctx contextx.Contextx, id int64) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(contextx.Contextx, int64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *IBiz) GetByID(ctx contextx.Contextx, id int64) (*event.Activity, error) {
	ret := _m.Called(ctx, id)

	var r0 *event.Activity
	if rf, ok := ret.Get(0).(func(contextx.Contextx, int64) *event.Activity); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*event.Activity)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(contextx.Contextx, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InviteMembers provides a mock function with given fields: ctx, id, emails
func (_m *IBiz) InviteMembers(ctx contextx.Contextx, id int64, emails []string) (*event.Activity, error) {
	ret := _m.Called(ctx, id, emails)

	var r0 *event.Activity
	if rf, ok := ret.Get(0).(func(contextx.Contextx, int64, []string) *event.Activity); ok {
		r0 = rf(ctx, id, emails)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*event.Activity)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(contextx.Contextx, int64, []string) error); ok {
		r1 = rf(ctx, id, emails)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: ctx, page, size
func (_m *IBiz) List(ctx contextx.Contextx, page int, size int) ([]*event.Activity, int, error) {
	ret := _m.Called(ctx, page, size)

	var r0 []*event.Activity
	if rf, ok := ret.Get(0).(func(contextx.Contextx, int, int) []*event.Activity); ok {
		r0 = rf(ctx, page, size)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*event.Activity)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(contextx.Contextx, int, int) int); ok {
		r1 = rf(ctx, page, size)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(contextx.Contextx, int, int) error); ok {
		r2 = rf(ctx, page, size)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// NewWithMembers provides a mock function with given fields: ctx, name, emails
func (_m *IBiz) NewWithMembers(ctx contextx.Contextx, name string, emails []string) (*event.Activity, error) {
	ret := _m.Called(ctx, name, emails)

	var r0 *event.Activity
	if rf, ok := ret.Get(0).(func(contextx.Contextx, string, []string) *event.Activity); ok {
		r0 = rf(ctx, name, emails)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*event.Activity)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(contextx.Contextx, string, []string) error); ok {
		r1 = rf(ctx, name, emails)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
