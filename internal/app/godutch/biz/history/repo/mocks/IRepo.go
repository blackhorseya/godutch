// Code generated by mockery v2.9.2. DO NOT EDIT.

package mocks

import (
	contextx "github.com/blackhorseya/godutch/internal/pkg/base/contextx"
	event "github.com/blackhorseya/godutch/internal/pkg/entity/event"

	mock "github.com/stretchr/testify/mock"
)

// IRepo is an autogenerated mock type for the IRepo type
type IRepo struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, created
func (_m *IRepo) Create(ctx contextx.Contextx, created *event.Record) (*event.Record, error) {
	ret := _m.Called(ctx, created)

	var r0 *event.Record
	if rf, ok := ret.Get(0).(func(contextx.Contextx, *event.Record) *event.Record); ok {
		r0 = rf(ctx, created)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*event.Record)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(contextx.Contextx, *event.Record) error); ok {
		r1 = rf(ctx, created)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, id
func (_m *IRepo) Delete(ctx contextx.Contextx, id int64) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(contextx.Contextx, int64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *IRepo) GetByID(ctx contextx.Contextx, id int64) (*event.Record, error) {
	ret := _m.Called(ctx, id)

	var r0 *event.Record
	if rf, ok := ret.Get(0).(func(contextx.Contextx, int64) *event.Record); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*event.Record)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(contextx.Contextx, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: ctx, actID, limit, offset
func (_m *IRepo) List(ctx contextx.Contextx, actID int64, limit int, offset int) ([]*event.Record, error) {
	ret := _m.Called(ctx, actID, limit, offset)

	var r0 []*event.Record
	if rf, ok := ret.Get(0).(func(contextx.Contextx, int64, int, int) []*event.Record); ok {
		r0 = rf(ctx, actID, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*event.Record)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(contextx.Contextx, int64, int, int) error); ok {
		r1 = rf(ctx, actID, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
