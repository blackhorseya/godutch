// Code generated by mockery v2.9.2. DO NOT EDIT.

package mocks

import (
	contextx "github.com/blackhorseya/godutch/internal/pkg/base/contextx"
	event "github.com/blackhorseya/godutch/internal/pkg/entity/event"

	mock "github.com/stretchr/testify/mock"

	user "github.com/blackhorseya/godutch/internal/pkg/entity/user"
)

// IBiz is an autogenerated mock type for the IBiz type
type IBiz struct {
	mock.Mock
}

// Delete provides a mock function with given fields: ctx, id, actID
func (_m *IBiz) Delete(ctx contextx.Contextx, id int64, actID int64) error {
	ret := _m.Called(ctx, id, actID)

	var r0 error
	if rf, ok := ret.Get(0).(func(contextx.Contextx, int64, int64) error); ok {
		r0 = rf(ctx, id, actID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *IBiz) GetByID(ctx contextx.Contextx, id int64) (*event.Record, error) {
	ret := _m.Called(ctx, id)

	var r0 *event.Record
	if rf, ok := ret.Get(0).(func(contextx.Contextx, int64) *event.Record); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*event.Record)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(contextx.Contextx, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: ctx, actID, page, size
func (_m *IBiz) List(ctx contextx.Contextx, actID int64, page int, size int) ([]*event.Record, error) {
	ret := _m.Called(ctx, actID, page, size)

	var r0 []*event.Record
	if rf, ok := ret.Get(0).(func(contextx.Contextx, int64, int, int) []*event.Record); ok {
		r0 = rf(ctx, actID, page, size)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*event.Record)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(contextx.Contextx, int64, int, int) error); ok {
		r1 = rf(ctx, actID, page, size)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewRecord provides a mock function with given fields: ctx, actID, payerID, remark, members, total
func (_m *IBiz) NewRecord(ctx contextx.Contextx, actID int64, payerID int64, remark string, members []*user.Member, total int) (*event.Record, error) {
	ret := _m.Called(ctx, actID, payerID, remark, members, total)

	var r0 *event.Record
	if rf, ok := ret.Get(0).(func(contextx.Contextx, int64, int64, string, []*user.Member, int) *event.Record); ok {
		r0 = rf(ctx, actID, payerID, remark, members, total)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*event.Record)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(contextx.Contextx, int64, int64, string, []*user.Member, int) error); ok {
		r1 = rf(ctx, actID, payerID, remark, members, total)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
